@model TE.BE.City.Presentation.Model.ViewModel.HomeViewModel
@using TE.BE.City.Infra.CrossCutting.Enum;
@using TE.BE.City.Presentation.Model.Response

<div class="content">
    <h1 class="h1">Mapa</h1>
</div>

<!--Filter-->
<form method="post" asp-controller="Home" asp-action="Index" runat="server">
    <table class="table search is-fullwidth">
        <thead>
            <tr>
                <th>
                    <div class="select">
                        @Html.DropDownListFor(model => model.DataViewState.DdlViewType, new SelectList(Model.DataViewState.DdlViewTypeItems, "Value", "Text"))
                    </div>
                </th>
                <th>
                    <div class="select">
                        @Html.DropDownListFor(model => model.DataViewState.DdlIssueType, new SelectList(Model.DataViewState.DdlIssueTypeItems, "Value", "Text"))
                    </div>
                </th>
                <th>
                    <div class="control">
                        @Html.EditorFor(m => m.DataViewState.StartDate, new { htmlAttributes = new { @class = "input is-hovered"} })
                    </div>
                </th>
                <th>
                    <div class="control">
                        @Html.EditorFor(m => m.DataViewState.EndDate, new { htmlAttributes = new { @class = "input is-hovered"} })
                    </div>
                </th>
                <th>
                    <div class="select">
                        @Html.DropDownListFor(model => model.DataViewState.DdlIsProblem, new SelectList(Model.DataViewState.DdlIsProblemItems, "Value", "Text"))
                    </div>
                </th>
                <th>
                    <div class="buttons">
                        <button type="submit" class="button is-info">Filtrar</button>
                    </div>
                </th>
                <th>
                    <a class="buttons icon-print" target="_blank" href='./home/Export?ddlIssueType=@(Model.DataViewState.DdlIssueType)&startDate=@(Model.DataViewState.StartDate)&endDate=@(Model.DataViewState.EndDate)&ddlIsProblem=@(Model.DataViewState.DdlIsProblem)' />
                </th>
            </tr>
        </thead>
    </table>
</form>


@{
    if (Model.Error != null)
    {
        <!-- Alert -->
        <div class="message is-warning">
            <div class="message-body">
                @Model.Error.Message
            </div>
    </div>
    }
}


<!--Map-->
@{
    if (Model.DataViewState.DdlViewType == "map")
    {
        <div class="screen-full">
            <div class="screen-map">
                <div class="map" id="map"></div>
                <script type="text/javascript">            
            window.onload = function () {
                var mapOptions = {
                    center: new google.maps.LatLng(@(Model.Map.InitialLatitude), @(Model.Map.InitialLongitude)),
                    zoom: @(Model.Map.InitialZoom),
                    mapTypeId: google.maps.MapTypeId.ROADMAP
                };

                var map = new google.maps.Map(document.getElementById("map"), mapOptions);
                var markers = @Html.Raw(Model.Map.RegionsSerialized);

                for (i = 0; i < markers.length; i++) {
                    var data = markers[i];
                    
                    // marker
                    if (data.Latitude != null && data.Longitude != null){
                        var infoWindow = new google.maps.InfoWindow();
                        var myLatlng = new google.maps.LatLng(data.Latitude, data.Longitude);
                        var marker = new google.maps.Marker({
                            position: myLatlng,
                            map: map,
                            title: data.Title,
                            icon: data.IsProblem ? getIconBad(data.Type) : getIconGood(data.Type) 
                        });
                        (function (marker, data) {
                            google.maps.event.addListener(marker, "click", function (e) {
                                var content = "<div><h4>" + data.Title + "</h4>";
                            
                                var arrayDescription = data.Description.split("|");
                                for (p = 0; p < arrayDescription.length; p++) {
                                    content += "<p>" + arrayDescription[p] + "</p>"
                                }
                                content += "</div>";

                                infoWindow.setContent(content);
                                infoWindow.open(map, marker);
                            });
                        })(marker, data);
                    }

                    // polyline
                    if (data.Path != null){
                        var infoWindowPoly = new google.maps.InfoWindow();
                        const path = [];
                        var jsonPath = JSON.parse(data.Path);
                        for (var j = 0; j < jsonPath.length; j++) {
                            var point = new google.maps.LatLng(jsonPath[j].latitude, jsonPath[j].longitude);
                            path.push(point);
                        }
                        
                        const pathObj = new google.maps.Polyline({
                            path: path,
                            geodesic: true,
                            strokeColor: data.IsProblem ? '#faba01' : '#092654',
                            strokeWeight: 5,
                        });
                        (function (pathObj, data) {
                            google.maps.event.addListener(pathObj, "click", function (e) {
                                console.log('clicked ' + path[0]);
                                var content = "<div><h4>" + data.Title + "</h4></dev>";
                            
                                var arrayDescription = data.Description.split("|");
                                for (p = 0; p < arrayDescription.length; p++) {
                                    content += "<p>" + arrayDescription[p] + "</p>"
                                }
                                content += "</div>";
                            
                                infoWindowPoly.setContent(content);
                                infoWindowPoly.setPosition(path[Math.floor(path.length/2)]);
                                infoWindowPoly.open(map);
                            });
                        })(pathObj, data);
                        pathObj.setMap(map);
                    }
                }
            }
            
            function getIconGood(type) {
                switch (type) {
                    case 0:
                        return "../images/street-good.png"; //http://maps.google.com/mapfiles/ms/icons/purple-dot.png
                        break;
                    case 1:
                        return "../images/collect-good.png"; //http://maps.google.com/mapfiles/ms/icons/orange-dot.png
                        break;
                    case 2:
                        return "../images/light-good.png"; //http://maps.google.com/mapfiles/ms/icons/yellow-dot.png
                        break;
                    case 6:
                        return "../images/water-good.png"; //http://maps.google.com/mapfiles/ms/icons/ltblue-dot.png
                        break;
                    case 4:
                        return "../images/sewer-good.png"; //http://maps.google.com/mapfiles/ms/icons/red-dot.png
                        break;
                    case 5:
                        return "../images/trash-good.png"; //http://maps.google.com/mapfiles/ms/icons/green-dot.png
                        break;
                }
            }
            
            function getIconBad(type) {
                            switch (type) {
                                case 0:
                                    return "../images/street-bad.png"; //http://maps.google.com/mapfiles/ms/icons/purple-dot.png
                                    break;
                                case 1:
                                    return "../images/collect-bad.png"; //http://maps.google.com/mapfiles/ms/icons/orange-dot.png
                                    break;
                                case 2:
                                    return "../images/light-bad.png"; //http://maps.google.com/mapfiles/ms/icons/yellow-dot.png
                                    break;
                                case 6:
                                    return "../images/water-bad.png"; //http://maps.google.com/mapfiles/ms/icons/ltblue-dot.png
                                    break;
                                case 4:
                                    return "../images/sewer-bad.png"; //http://maps.google.com/mapfiles/ms/icons/red-dot.png
                                    break;
                                case 5:
                                    return "../images/trash-bad.png"; //http://maps.google.com/mapfiles/ms/icons/green-dot.png
                                    break;
                            }
                        }
        </script>
                <div class="legend" [style.display]="ddlView==0 ? 'flex' : 'none'">
                    <div class="square-blue"></div>
                    <p class="legend-text">Ocorrências em conformidade</p>
                    <div class="square-yellow"></div>
                    <p class="legend-text">Ocorrências identificado com problema</p>
                </div>
            </div>
            <div class="screen-news">
                <iframe class="news-iframe" src="/site/news"></iframe>
            </div>
        </div>
    }
}


<!--Content grid - Light-->
@{
    if (Model.DataViewState.DdlViewType == "table" && (Model.DataViewState.DdlIssueType == "Light" || Model.DataViewState.DdlIssueType == "All"))
    {
        <h3 class="table-title">Iluminação Pública</h3>
        <table #searchTableLight class="table result is-fullwidth">
        <thead>
            <tr>
                <th>Id</th>
                <th>Título</th>
                <th>Problema</th>
                <th>Latitude</th>
                <th>Longitude</th>
                <th>Possui poste?</th>
                <th>As luzes estão funcionando?</th>
                <th>Há fios elétricos soltos?</th>
                <th>Criado em</th>
            </tr>
        </thead>
        <tbody>
            @foreach (LightResponse lightResponse in Model.LightList)
            {
                <tr>
                    <td>@lightResponse.Id</td>
                    <td>@lightResponse.Title</td>
                    @if (lightResponse.IsProblem.Equals(true)){ <td>Sim</td> } else { <td>Não</td> }
                    <td>@lightResponse.Latitude</td>
                    <td>@lightResponse.Longitude</td>
                    @if (lightResponse.HasLight.Equals(true)){ <td>Sim</td> } else { <td>Não</td> }
                    @if (lightResponse.IsItWorking.Equals(true)){ <td>Sim</td> } else { <td>Não</td> }
                    @if (lightResponse.HasLosesCable.Equals(true)){ <td>Sim</td> } else { <td>Não</td> }
                    <td>@lightResponse.CreatedAt.ToShortDateString()</td>
                </tr>
            }
        </tbody>
        </table>
    }
}

<!--Content grid - Asphalt-->
@{
    if (Model.DataViewState.DdlViewType == "table" && (Model.DataViewState.DdlIssueType == "Asphalt" || Model.DataViewState.DdlIssueType == "All"))
    {
        <h3 class="table-title">Calçadas e Asfalto</h3>
        <table #searchTableAsphalt class="table result is-fullwidth" [style.display]="ddlTypeIssue==0 && ddlView==1 ? 'block' : 'none'">
            <thead>
            <tr>
                <th>Id</th>
                <th>Título</th>
                <th>Problema</th>
                <th>Latitude</th>
                <th>Longitude</th>
                <th>A via é asfaltada?</th>
                <th>A via possui buracos ou crateras?</th>
                <th>Há calçadas pavimentadas de acordo com os requisitos municipais?</th>
                <th>Criado em</th>
            </tr>
        </thead>
        <tbody>
            @foreach (AsphaltResponse asphaltResponse in Model.AsphaltList)
            {
                <tr>
                    <td>@asphaltResponse.Id</td>
                    <td>@asphaltResponse.Title</td>
                    @if (asphaltResponse.IsProblem.Equals(true)){ <td>Sim</td> } else { <td>Não</td> }
                    <td>@asphaltResponse.Latitude</td>
                    <td>@asphaltResponse.Longitude</td>
                    @if (asphaltResponse.IsPaved.Equals(true)){ <td>Sim</td> } else { <td>Não</td> }
                    @if (asphaltResponse.HasHoles.Equals(true)){ <td>Sim</td> } else { <td>Não</td> }
                    @if (asphaltResponse.HasPavedSidewalks.Equals(true)){ <td>Sim</td> } else { <td>Não</td> }
                    <td>@asphaltResponse.CreatedAt.ToShortDateString()</td>
                </tr>
            }
        </tbody>
        </table>
    }
}

<!--Content grid - Collect-->
@{
    if (Model.DataViewState.DdlViewType == "table" && (Model.DataViewState.DdlIssueType == "Collect" || Model.DataViewState.DdlIssueType == "All"))
    {
        <h3 class="table-title">Coleta de Lixo</h3>
        <table #searchTableCollect class="table result is-fullwidth" [style.display]="ddlTypeIssue==1 && ddlView==1 ? 'block' : 'none'">
            <thead>
            <tr>
                <th>Id</th>
                <th>Título</th>
                <th>Problema</th>
                <th>Latitude</th>
                <th>Longitude</th>
                <th>Há coleta de lixo?</th>
                <th>Qual a frequência semanal?</th>
                <th>Criado em</th>
            </tr>
        </thead>
        <tbody>
            @foreach (CollectResponse collectResponse in Model.CollectList)
            {
                <tr>
                    <td>@collectResponse.Id</td>
                    <td>@collectResponse.Title</td>
                    @if (collectResponse.IsProblem.Equals(true)){ <td>Sim</td> } else { <td>Não</td> }
                    <td>@collectResponse.Latitude</td>
                    <td>@collectResponse.Longitude</td>
                    @if (collectResponse.HasCollect.Equals(true)){ <td>Sim</td> } else { <td>Não</td> }
                    <td>@collectResponse.HowManyTimes</td>
                    <td>@collectResponse.CreatedAt.ToShortDateString()</td>
                </tr>
            }
        </tbody>
        </table>
    }
}

<!--Content grid - Sewer-->
@{
    if (Model.DataViewState.DdlViewType == "table" && (Model.DataViewState.DdlIssueType == "Sewer" || Model.DataViewState.DdlIssueType == "All"))
    {
        <h3 class="table-title">Tratamento de Esgoto</h3>
        <table #searchTableSewer class="table result is-fullwidth" [style.display]="ddlTypeIssue==4 && ddlView==1 ? 'block' : 'none'">
            <thead>
            <tr>
                <th>Id</th>
                <th>Título</th>
                <th>Problema</th>
                <th>Latitude</th>
                <th>Longitude</th>
                <th>Há coleta ou tratamento de esgoto?</th>
                <th>Possui fossa?</th>
                <th>Alguma obra de saneamento está sendo executada?</th>
                <th>Criado em</th>
            </tr>
        </thead>
        <tbody>
            @foreach (SewerResponse sewerResponse in Model.SewerList)
            {
                <tr>
                    <td>@sewerResponse.Id</td>
                    <td>@sewerResponse.Title</td>
                    @if (sewerResponse.IsProblem.Equals(true)){ <td>Sim</td> } else { <td>Não</td> }
                    <td>@sewerResponse.Latitude</td>
                    <td>@sewerResponse.Longitude</td>
                    @if (sewerResponse.HasHomeSewer.Equals(true)){ <td>Sim</td> } else { <td>Não</td> }
                    @if (sewerResponse.HasHomeCesspool.Equals(true)){ <td>Sim</td> } else { <td>Não</td> }
                    @if (sewerResponse.HasSanitationProject.Equals(true)){ <td>Sim</td> } else { <td>Não</td> }
                    <td>@sewerResponse.CreatedAt.ToShortDateString()</td>
                </tr>
            }
        </tbody>
        </table>
    }
}

<!--Content grid - Trash-->
@{
    if (Model.DataViewState.DdlViewType == "table" && (Model.DataViewState.DdlIssueType == "Trash" || Model.DataViewState.DdlIssueType == "All"))
    {
        <h3 class="table-title">Limpeza Urbana</h3>
        <table #searchTableTrash class="table result is-fullwidth" [style.display]="ddlTypeIssue==5 && ddlView==1 ? 'block' : 'none'">
            <thead>
            <tr>
                <th>Id</th>
                <th>Título</th>
                <th>Problema</th>
                <th>Latitude</th>
                <th>Longitude</th>
                <th>A prefeitura faz a limpeza?</th>
                <th>Qual a frequência?</th>
                <th>Existe lixo acumulado?</th>
                <th>A prefeitura faz a capinagem?</th>
                <th>Criado em</th>
            </tr>
        </thead>
        <tbody>
            @foreach (TrashResponse trashResponse in Model.TrashList)
            {
                <tr>
                    <td>@trashResponse.Id</td>
                    <td>@trashResponse.Title</td>
                    @if (trashResponse.IsProblem.Equals(true)){ <td>Sim</td> } else { <td>Não</td> }
                    <td>@trashResponse.Latitude</td>
                    <td>@trashResponse.Longitude</td>
                    @if (trashResponse.HasRoadcleanUp.Equals(true)){ <td>Sim</td> } else { <td>Não</td> }
                    <td>@trashResponse.HowManyTimes</td>
                    @if (trashResponse.HasAccumulatedTrash.Equals(true)){ <td>Sim</td> } else { <td>Não</td> }
                    @if (trashResponse.HasLandWeeding.Equals(true)){ <td>Sim</td> } else { <td>Não</td> }
                    <td>@trashResponse.CreatedAt.ToShortDateString()</td>
                </tr>
            }
        </tbody>
        </table>
    }
}

<!--Content grid - Water-->
@{
    if (Model.DataViewState.DdlViewType == "table" && (Model.DataViewState.DdlIssueType == "Water" || Model.DataViewState.DdlIssueType == "All"))
    {
        <h3 class="table-title">Água Potável</h3>
        <table #searchTableWater class="table result is-fullwidth" [style.display]="ddlTypeIssue==6 && ddlView==1 ? 'block' : 'none'">
            <thead>
            <tr>
                <th>Id</th>
                <th>Título</th>
                <th>Problema</th>
                <th>Latitude</th>
                <th>Longitude</th>
                <th>Possui poço amazônico?</th>
                <th>Há água encanada?</th>
                <th>Quantos dias faltam água na semana?</th>
                <th>Alguma obra de saneamento está sendo executada?</th>
                <th>Criado em</th>
            </tr>
        </thead>
        <tbody>
            @foreach (WaterResponse waterResponse in Model.WaterList)
            {
                <tr>
                    <td>@waterResponse.Id</td>
                    <td>@waterResponse.Title</td>
                    @if (waterResponse.IsProblem.Equals(true)){ <td>Sim</td> } else { <td>Não</td> }
                    <td>@waterResponse.Latitude</td>
                    <td>@waterResponse.Longitude</td>
                    @if (waterResponse.HasWell.Equals(true)){ <td>Sim</td> } else { <td>Não</td> }
                    @if (waterResponse.HomeWithWater.Equals(true)){ <td>Sim</td> } else { <td>Não</td> }
                    <td>@waterResponse.WaterMissedInAWeek</td>
                    @if (waterResponse.HasSanitationProject.Equals(true)){ <td>Sim</td> } else { <td>Não</td> }    
                    <td>@waterResponse.CreatedAt.ToShortDateString()</td>
                </tr>
            }
        </tbody>
        </table>
    }
}

<!-- 
<div class="lightbox">
    <a href="./survey">
    <article class="message is-link">
        <div class="message-header">
            <p>De Sua Opinião</p>
            <img class="icon-edit" src="~/images/edit.png" />
        </div>
        <div class="message-body">
                <b>Leva menos de 1 minuto.</b> Responsa nossa pesquisa e ajude a entendermos a relevancia do conteúdo deste site.
        </div>
    </article>
    </a>
</div>
-->

<!-- Charts -->
@{
    if (Model.DataViewState.DdlViewType == "chart")
    {
        <script type="text/javascript">
            window.onload = function () {

                // Quantity
                var chartQuantity = new CanvasJS.Chart("ChartQuantityContainer", {
                    title: {
                        text: "Quantidade",
                        fontSize: 16,
                        fontColor: "#092654",
                        fontFamily: "Roboto"
                    },
                    axisY: {
                        labelFontSize: 14,
                        fontFamily: "Roboto",
                        labelFontColor: "#7A7A7A"
                    },
                    axisX: {
                        labelAngle: -35,
                        labelFontSize: 10,
                        fontFamily: "Roboto",
                        labelFontColor: "#7A7A7A"
                    },
                    data: [
                        {
                            type: "column",
                            indexLabelPlacement: "outside",
                            dataPoints: @Html.Raw(Model.Chart.ChartQuantitySerialized)
                            
                        }
                    ]
                });
                chartQuantity.render();


                // Proportion
                var chartProportion = new CanvasJS.Chart("ChartProportionContainer", {
                    title: {
                        text: "Proporção",
                        fontSize: 16,
                        fontColor: "#092654",
                        fontFamily: "Roboto"
                    },
                    legend: {
                        horizontalAlign: "center",
                        fontSize: 10,
                        fontColor: "#7A7A7A",
                        fontFamily: "Roboto"
                    },
                    data: [
                        {
                            type: "pie",
                            toolTipContent: "{label}: #percent %",
                            showInLegend: true,
                            legendText: "{label}",
                            dataPoints: @Html.Raw(Model.Chart.ChartProportionSerialized)
                        }
                    ]
                });
                chartProportion.render();
            }
        </script>

        <div class="chart">
            <div id="ChartQuantityContainer" class="chartContainer"></div>
            <div id="ChartProportionContainer" class="chartContainer"></div>
        </div>
        
        // Table
        <br />
        <br />
        <h3 class="table-title">Tabela de geral</h3>
        <p class="legend-text">* Tabela não afetada pelo filtro.</p>
        <table class="table result is-fullwidth">
            <thead>
                <tr>
                    <th>Tipo</th>
                    <th>Problemas</th>
                    <th>Não problemas</th>
                    <th>Total</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    @{
                        <td>@TypeIssue.Asphalt.GetDescription()</td>
                        <td>@Model.Chart.ChartTable.GetValueOrDefault(TypeIssue.Asphalt).NoProblemCount</td>
                        <td>@Model.Chart.ChartTable.GetValueOrDefault(TypeIssue.Asphalt).ProblemCount</td>
                        <td>@Model.Chart.ChartTable.GetValueOrDefault(TypeIssue.Asphalt).Total</td>
                    }
                </tr>
                <tr>
                    @{
                        <td>@TypeIssue.Collect.GetDescription()</td>
                        <td>@Model.Chart.ChartTable.GetValueOrDefault(TypeIssue.Collect).NoProblemCount</td>
                        <td>@Model.Chart.ChartTable.GetValueOrDefault(TypeIssue.Collect).ProblemCount</td>
                        <td>@Model.Chart.ChartTable.GetValueOrDefault(TypeIssue.Collect).Total</td>
                    }
                </tr>
                <tr>
                    @{
                        <td>@TypeIssue.Light.GetDescription()</td>
                        <td>@Model.Chart.ChartTable.GetValueOrDefault(TypeIssue.Light).NoProblemCount</td>
                        <td>@Model.Chart.ChartTable.GetValueOrDefault(TypeIssue.Light).ProblemCount</td>
                        <td>@Model.Chart.ChartTable.GetValueOrDefault(TypeIssue.Light).Total</td>
                    }
                </tr>
                <tr>
                    @{
                        <td>@TypeIssue.Sewer.GetDescription()</td>
                        <td>@Model.Chart.ChartTable.GetValueOrDefault(TypeIssue.Sewer).NoProblemCount</td>
                        <td>@Model.Chart.ChartTable.GetValueOrDefault(TypeIssue.Sewer).ProblemCount</td>
                        <td>@Model.Chart.ChartTable.GetValueOrDefault(TypeIssue.Sewer).Total</td>
                    }
                </tr>
                <tr>
                    @{
                        <td>@TypeIssue.Trash.GetDescription()</td>
                        <td>@Model.Chart.ChartTable.GetValueOrDefault(TypeIssue.Trash).NoProblemCount</td>
                        <td>@Model.Chart.ChartTable.GetValueOrDefault(TypeIssue.Trash).ProblemCount</td>
                        <td>@Model.Chart.ChartTable.GetValueOrDefault(TypeIssue.Trash).Total</td>
                    }
                </tr>
                <tr>
                    @{
                        <td>@TypeIssue.Water.GetDescription()</td>
                        <td>@Model.Chart.ChartTable.GetValueOrDefault(TypeIssue.Water).NoProblemCount</td>
                        <td>@Model.Chart.ChartTable.GetValueOrDefault(TypeIssue.Water).ProblemCount</td>
                        <td>@Model.Chart.ChartTable.GetValueOrDefault(TypeIssue.Water).Total</td>
                    }
                </tr>
                <tr>
                    @{
                        <td style="font-weight: bold;">@TypeIssue.All.GetDescription()</td>
                        <td style="font-weight: bold;">@Model.Chart.ChartTable.GetValueOrDefault(TypeIssue.All).NoProblemCount</td>
                        <td style="font-weight: bold;">@Model.Chart.ChartTable.GetValueOrDefault(TypeIssue.All).ProblemCount</td>
                        <td style="font-weight: bold;">@Model.Chart.ChartTable.GetValueOrDefault(TypeIssue.All).Total</td>
                    }
                </tr>
            </tbody>
        </table>
    }
}

<!-- Counter visitors -->
<div id="sfc7tesdlw4jrfdzr4klj3hwj9fwwdwaa9y"></div>
<script type="text/javascript" src="https://counter10.optistats.ovh/private/counter.js?c=7tesdlw4jrfdzr4klj3hwj9fwwdwaa9y&down=async" async></script>